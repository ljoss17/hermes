#!/bin/bash

# This script sets up 2 Namada chains locally
# `make build` and `make build-wasm-scripts` on Namada directory in advance
# Run with `setup-namada ${namada_dir}`

set -e


# Get absolute path to Namada directory
SCRIPT_DIR=$(cd $(dirname $0) && pwd)
NAMADA_DIR=$(cd $1 && pwd)
cd $SCRIPT_DIR
if [ -z "${NAMADA_DIR}" ]
then
  echo "ERROR: Namada directory should be given"
  exit 1
fi

HERMES_DIR=${PWD%/scripts*}

# edit for your environment
NAMADAC="${NAMADA_DIR}/target/debug/namadac"
NAMADAN="${NAMADA_DIR}/target/debug/namadan"
NAMADAW="${NAMADA_DIR}/target/debug/namadaw"
BASE_GENESIS_DIR="${NAMADA_DIR}/genesis/localnet"
CHECKSUM_PATH="${NAMADA_DIR}/wasm/checksums.json"
DATA_DIR="${HERMES_DIR}/data"

LEDGER_ADDR_A="http://127.0.0.1:27657"
LEDGER_ADDR_B="http://127.0.0.1:28657"

HERMES_CONFIG_TEMPLATE="
[global]
log_level = 'info'

[mode]

[mode.clients]
enabled = true
refresh = true
misbehaviour = true

[mode.connections]
enabled = false

[mode.channels]
enabled = false

[mode.packets]
enabled = true
clear_interval = 10
clear_on_start = false
tx_confirmation = true

[telemetry]
enabled = false
host = '127.0.0.1'
port = 3001

[[chains]]
id = '_CHAIN_ID_A_'
type = 'Namada'
rpc_addr = 'http://127.0.0.1:27657'
grpc_addr = 'http://127.0.0.1:9090'
event_source = { mode = 'push', url = 'ws://127.0.0.1:27657/websocket', batch_delay = '500ms' }
account_prefix = ''
key_name = 'relayer'
store_prefix = 'ibc'
gas_price = { price = 0.001, denom = '_FEE_TOKEN_A_' }

[[chains]]
id = '_CHAIN_ID_B_'
type = 'Namada'
rpc_addr = 'http://127.0.0.1:28657'
grpc_addr = 'http://127.0.0.1:9090'
event_source = { mode = 'push', url = 'ws://127.0.0.1:28657/websocket', batch_delay = '500ms' }
account_prefix = ''
key_name = 'relayer'
store_prefix = 'ibc'
gas_price = { price = 0.001, denom = '_FEE_TOKEN_B_' }
"

function make_genesis() {
  local suffix=$1
  local base_dir=${DATA_DIR}/namada-${suffix}

  mkdir -p ${base_dir}/templates
  cp ${BASE_GENESIS_DIR}/*.toml ${base_dir}/templates
  sed -i .bak "s/epochs_per_year = .*/epochs_per_year = 31536/g" ${base_dir}/templates/parameters.toml
  sed -i .bak "s/default_mint_limit = .*/default_mint_limit = \"1000000000\"/g" ${base_dir}/templates/parameters.toml
  sed -i .bak "s/default_per_epoch_throughput_limit = .*/default_per_epoch_throughput_limit = \"1000000000\"/g" ${base_dir}/templates/parameters.toml

  mkdir ${base_dir}/pre-genesis
  cp -r ${BASE_GENESIS_DIR}/src/pre-genesis/* ${base_dir}/pre-genesis
}

function init_network() {
  local suffix=$1
  local base_dir=${DATA_DIR}/namada-${suffix}
  local validator_base_dir=${base_dir}/setup/validator-0

  mkdir -p ${base_dir}/genesis
  local chain_id=$(NAMADA_BASE_DIR=${base_dir} \
    ${NAMADAC} utils init-network \
    --chain-prefix namada-${suffix} \
    --genesis-time "2023-01-01T00:00:00Z" \
    --templates-path ${base_dir}/templates \
    --wasm-checksums-path ${CHECKSUM_PATH} \
    --archive-dir ${base_dir}/genesis \
    | awk '$1 == "Derived" {print $4}')

  NAMADA_NETWORK_CONFIGS_DIR=${base_dir}/genesis \
  ${NAMADAC} --base-dir ${validator_base_dir} \
    utils join-network \
    --chain-id ${chain_id} \
    --genesis-validator validator-0 \
    --pre-genesis-path \
    ${base_dir}/pre-genesis/validator-0 \
    --dont-prefetch-wasm

  rm -rf ${base_dir}/${chain_id}
  # for non-validator
  NAMADA_NETWORK_CONFIGS_DIR=${base_dir}/genesis \
  ${NAMADAC} --base-dir ${base_dir} \
  utils join-network \
  --chain-id ${chain_id} \
  --dont-prefetch-wasm
}

function copy_wasm() {
  local suffix=$1
  local chain_id=$2

  local base_dir=${DATA_DIR}/namada-${suffix}

  cp ${NAMADA_DIR}/wasm/*.wasm ${base_dir}/setup/validator-0/${chain_id}/wasm/
}

function init_relayer_acc() {
  local suffix=$1
  local chain_id=$2

  local base_dir=${DATA_DIR}/namada-${suffix}

  ${NAMADAW} --base-dir ${base_dir} \
    gen --alias relayer --unsafe-dont-encrypt
}

function add_relayer_key() {
  local suffix=$1
  local chain_id=$2

  local base_dir=${DATA_DIR}/namada-${suffix}

  cargo run --bin hermes -- --config ${HERMES_DIR}/config_for_namada.toml \
    keys add \
    --chain ${chain_id} \
    --key-file ${base_dir}/${chain_id}/wallet.toml \
    --overwrite
}

# ==== main ====

mkdir -p ${DATA_DIR}

# for chain A
make_genesis "a"
result=$(init_network "a")
chain_id_a=$(echo "${result}" | awk '$5 == "ID" {id = $6} END {print id}')

copy_wasm "a" ${chain_id_a}

${NAMADAN} --base-dir ${DATA_DIR}/namada-a/setup/validator-0 \
  ledger run > ${DATA_DIR}/namada-a/namada.log 2>&1 &
sleep 5

# shutdown temporarily to bootstrap chain-b
killall namadan

# for chain B
make_genesis "b"
result=$(init_network "b")
chain_id_b=$(echo "${result}" | awk '$5 == "ID" {id = $6} END {print id}')

copy_wasm "b" ${chain_id_b}

${NAMADAN} --base-dir ${DATA_DIR}/namada-b/setup/validator-0 \
  ledger run > ${DATA_DIR}/namada-b/namada.log 2>&1 &
sleep 5

# shutdown temporarily to bootstrap chain-b
killall namadan

# Edit chain-b addresses
sed -i .bak \
  -e "s/:27656/:28656/" \
  -e "s/:27657/:28657/" \
  -e "s/:27658/:28658/" \
  ${DATA_DIR}/namada-b/setup/validator-0/${chain_id_b}/config.toml
sed -i .bak \
  -e "s/:27656/:28656/" \
  -e "s/:27657/:28657/" \
  -e "s/:27658/:28658/" \
  ${DATA_DIR}/namada-b/setup/validator-0/${chain_id_b}/cometbft/config/config.toml

# Restart each chain
${NAMADAN} --base-dir ${DATA_DIR}/namada-a/setup/validator-0 \
  ledger run > ${DATA_DIR}/namada-a/namada.log 2>&1 &
echo "Namada chain A's PID = $!"
sleep 5

${NAMADAN} --base-dir ${DATA_DIR}/namada-b/setup/validator-0 \
  ledger run > ${DATA_DIR}/namada-b/namada.log 2>&1 &
echo "Namada chain B's PID = $!"
sleep 5

# Create "relayer" account on each chain
init_relayer_acc "a" ${chain_id_a}
init_relayer_acc "b" ${chain_id_b}

# Get token addresses
nam_addr_a=$(${NAMADAW} --base-dir ${DATA_DIR}/namada-a find --alias nam | awk '/"nam":/{print $3}')
nam_addr_b=$(${NAMADAW} --base-dir ${DATA_DIR}/namada-b find --alias nam | awk '/"nam":/{print $3}')

# Make Hermes config
cd ${HERMES_DIR}
echo "${HERMES_CONFIG_TEMPLATE}" \
  | sed -e "s/_CHAIN_ID_A_/${chain_id_a}/g" -e "s/_CHAIN_ID_B_/${chain_id_b}/g" \
  | sed -e "s/_FEE_TOKEN_A_/${nam_addr_a}/g" -e "s/_FEE_TOKEN_B_/${nam_addr_b}/g" \
  > ${HERMES_DIR}/config_for_namada.toml

# Add namada keys to Hermes
add_relayer_key "a" ${chain_id_a}
add_relayer_key "b" ${chain_id_b}

echo "2 Namada chains are running"
echo "You can use Hermes with ${HERMES_DIR}/config_for_namada.toml"

echo "You also want to run the following lines:"
echo "export CHAIN_A_ID=${chain_id_a}"
echo "export CHAIN_B_ID=${chain_id_b}"
